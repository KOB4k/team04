// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/B6001186/Contagions/ent/nametitle"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Nametitle is the model entity for the Nametitle schema.
type Nametitle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "Title" field.
	Title string `json:"Title,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NametitleQuery when eager-loading is set.
	Edges NametitleEdges `json:"edges"`
}

// NametitleEdges holds the relations/edges for other nodes in the graph.
type NametitleEdges struct {
	// Employee holds the value of the employee edge.
	Employee []*Employee
	// Patient holds the value of the patient edge.
	Patient []*Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading.
func (e NametitleEdges) EmployeeOrErr() ([]*Employee, error) {
	if e.loadedTypes[0] {
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading.
func (e NametitleEdges) PatientOrErr() ([]*Patient, error) {
	if e.loadedTypes[1] {
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nametitle) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Title
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nametitle fields.
func (n *Nametitle) assignValues(values ...interface{}) error {
	if m, n := len(values), len(nametitle.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	n.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Title", values[0])
	} else if value.Valid {
		n.Title = value.String
	}
	return nil
}

// QueryEmployee queries the employee edge of the Nametitle.
func (n *Nametitle) QueryEmployee() *EmployeeQuery {
	return (&NametitleClient{config: n.config}).QueryEmployee(n)
}

// QueryPatient queries the patient edge of the Nametitle.
func (n *Nametitle) QueryPatient() *PatientQuery {
	return (&NametitleClient{config: n.config}).QueryPatient(n)
}

// Update returns a builder for updating this Nametitle.
// Note that, you need to call Nametitle.Unwrap() before calling this method, if this Nametitle
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nametitle) Update() *NametitleUpdateOne {
	return (&NametitleClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (n *Nametitle) Unwrap() *Nametitle {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nametitle is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nametitle) String() string {
	var builder strings.Builder
	builder.WriteString("Nametitle(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", Title=")
	builder.WriteString(n.Title)
	builder.WriteByte(')')
	return builder.String()
}

// Nametitles is a parsable slice of Nametitle.
type Nametitles []*Nametitle

func (n Nametitles) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
