// Code generated by entc, DO NOT EDIT.

package area

import (
	"github.com/B6001186/Contagions/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AreaName applies equality check predicate on the "AreaName" field. It's identical to AreaNameEQ.
func AreaName(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAreaName), v))
	})
}

// AreaNameEQ applies the EQ predicate on the "AreaName" field.
func AreaNameEQ(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAreaName), v))
	})
}

// AreaNameNEQ applies the NEQ predicate on the "AreaName" field.
func AreaNameNEQ(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAreaName), v))
	})
}

// AreaNameIn applies the In predicate on the "AreaName" field.
func AreaNameIn(vs ...string) predicate.Area {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Area(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAreaName), v...))
	})
}

// AreaNameNotIn applies the NotIn predicate on the "AreaName" field.
func AreaNameNotIn(vs ...string) predicate.Area {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Area(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAreaName), v...))
	})
}

// AreaNameGT applies the GT predicate on the "AreaName" field.
func AreaNameGT(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAreaName), v))
	})
}

// AreaNameGTE applies the GTE predicate on the "AreaName" field.
func AreaNameGTE(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAreaName), v))
	})
}

// AreaNameLT applies the LT predicate on the "AreaName" field.
func AreaNameLT(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAreaName), v))
	})
}

// AreaNameLTE applies the LTE predicate on the "AreaName" field.
func AreaNameLTE(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAreaName), v))
	})
}

// AreaNameContains applies the Contains predicate on the "AreaName" field.
func AreaNameContains(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAreaName), v))
	})
}

// AreaNameHasPrefix applies the HasPrefix predicate on the "AreaName" field.
func AreaNameHasPrefix(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAreaName), v))
	})
}

// AreaNameHasSuffix applies the HasSuffix predicate on the "AreaName" field.
func AreaNameHasSuffix(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAreaName), v))
	})
}

// AreaNameEqualFold applies the EqualFold predicate on the "AreaName" field.
func AreaNameEqualFold(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAreaName), v))
	})
}

// AreaNameContainsFold applies the ContainsFold predicate on the "AreaName" field.
func AreaNameContainsFold(v string) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAreaName), v))
	})
}

// HasDisease applies the HasEdge predicate on the "disease" edge.
func HasDisease() predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDiseaseWith applies the HasEdge predicate on the "disease" edge with a given conditions (other predicates).
func HasDiseaseWith(preds ...predicate.Disease) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DiseaseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DiseaseTable, DiseaseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatistic applies the HasEdge predicate on the "statistic" edge.
func HasStatistic() predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatisticTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatisticTable, StatisticColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatisticWith applies the HasEdge predicate on the "statistic" edge with a given conditions (other predicates).
func HasStatisticWith(preds ...predicate.Statistic) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatisticInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, StatisticTable, StatisticColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLevel applies the HasEdge predicate on the "level" edge.
func HasLevel() predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LevelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LevelTable, LevelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLevelWith applies the HasEdge predicate on the "level" edge with a given conditions (other predicates).
func HasLevelWith(preds ...predicate.Level) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LevelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LevelTable, LevelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EmployeeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Area) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Area) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Area) predicate.Area {
	return predicate.Area(func(s *sql.Selector) {
		p(s.Not())
	})
}
